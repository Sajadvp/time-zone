<%- include("../../views/partials/admin/header1") %>
<%- include("../../views/partials/admin/sidebar1") %>
<%- include("../../views/partials/admin/navbar1") %>

<style>
  /* Using the same styles from your coupon page */
  body {
    font-family: 'Poppins', sans-serif;
    background: linear-gradient(135deg, #f5f7fa, #c3cfe2);
    margin: 0;
    padding: 0;
    min-height: 100vh;
    overflow-x: hidden;
  }

  .container {
    padding: 30px;
    max-width: 1200px;
    margin: 0 auto;
  }

  .page-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    animation: slideInFromTop 0.5s ease-out;
  }

  .page-header h2 {
    font-size: 28px;
    font-weight: 700;
    color: #2c3e50;
    letter-spacing: 0.5px;
  }

  .card {
    border-radius: 15px;
    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
    background: #fff;
    overflow: hidden;
    transition: all 0.3s ease;
    position: relative;
  }

  .card-body {
    padding: 25px;
  }

  .form-group {
    margin-bottom: 20px;
    position: relative;
  }

  .form-group label {
    display: block;
    margin-bottom: 8px;
    font-weight: 600;
    color: #2c3e50;
    font-size: 14px;
  }

  .form-group input,
  .form-group textarea,
  .form-group select {
    width: 100%;
    padding: 12px;
    border: 2px solid #ecf0f1;
    border-radius: 8px;
    font-size: 14px;
    transition: all 0.3s ease;
  }

  .form-group input:focus,
  .form-group textarea:focus,
  .form-group select:focus {
    border-color: #3498db;
    box-shadow: 0 0 8px rgba(52, 152, 219, 0.3);
    outline: none;
  }

  .form-group .error {
    color: #e74c3c;
    font-size: 12px;
    position: absolute;
    bottom: -18px;
    left: 0;
    display: none;
  }

  button[type="submit"] {
    background: linear-gradient(45deg, #2ecc71, #27ae60);
    color: white;
    border: none;
    padding: 12px 25px;
    border-radius: 25px;
    cursor: pointer;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 1px;
    width: 100%;
    transition: all 0.3s ease;
  }

  button[type="submit"]:hover {
    background: linear-gradient(45deg, #27ae60, #219653);
    transform: translateY(-3px);
    box-shadow: 0 6px 15px rgba(46, 204, 113, 0.3);
  }

  .crop-container {
    width: 100%;
    max-height: 500px;
    overflow: hidden;
    text-align: center;
    margin-bottom: 10px;
  }

  #cropImage {
    max-width: 100%;
    max-height: 500px;
  }

  #cropModal {
    position: fixed;
    top: 10%;
    left: 50%;
    transform: translateX(-50%);
    background: #fff;
    padding: 20px;
    border-radius: 15px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    z-index: 9999;
    width: 80%;
    max-width: 600px;
    text-align: center;
  }

  .remove-cropped-image {
    background-color: #e74c3c;
    color: white;
    border: none;
    padding: 5px 10px;
    border-radius: 5px;
    cursor: pointer;
    margin-top: 5px;
    transition: all 0.3s ease;
  }

  .remove-cropped-image:hover {
    background-color: #c0392b;
  }

  #imagePreview {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-top: 10px;
  }

  #imagePreview .image-container {
    position: relative;
  }

  #imagePreview img {
    width: 100px;
    height: 100px;
    border-radius: 5px;
    object-fit: cover;
  }

  #imageValidationMessage {
    color: #e74c3c;
    font-size: 12px;
    margin-top: 5px;
  }

  @keyframes slideInFromTop {
    from { transform: translateY(-50px); opacity: 0; }
    to { transform: translateY(0); opacity: 1; }
  }
</style>

<div class="container">
  <div class="page-header">
    <h2>Add New Product</h2>
  </div>

  <div class="card shadow-sm border-0 position-relative">
    <div class="card-body">
      <h3 style="color: #e74c3c; margin-bottom: 20px;"><%=error%></h3>
      <form
        action="/admin/products/add"
        method="POST"
        enctype="multipart/form-data"
        id="productForm"
      >
        <!-- Product Name -->
        <div class="form-group">
          <label for="productName">Product Name</label>
          <input type="text" id="productName" name="productName" required />
          <span class="error"></span>
        </div>

        <!-- Description -->
        <div class="form-group">
          <label for="description">Description</label>
          <textarea id="description" name="description"></textarea>
          <span class="error"></span>
        </div>

        <!-- Category -->
        <div class="form-group">
          <label for="category">Category</label>
          <select id="category" name="category" required>
            <option value="">Select Category</option>
            <% categories.forEach(category => { %>
            <option value="<%= category._id %>"><%= category.name %></option>
            <% }); %>
          </select>
          <span class="error"></span>
        </div>

        <!-- Brand -->
        <div class="form-group">
          <label for="brand">Brand</label>
          <select id="brand" name="brand" required>
            <option value="">Select Brand</option>
            <% brand.forEach(brand => { %>
            <option value="<%= brand._id %>"><%= brand.brandName %></option>
            <% }); %>
          </select>
          <span class="error"></span>
        </div>

        <!-- Price -->
        <div class="form-group">
          <label for="price">Price</label>
          <input type="number" id="price" name="price" required step="0.01" min="0" />
          <span class="error"></span>
        </div>

        <!-- Stock Quantity -->
        <div class="form-group">
          <label for="stockQuantity">Stock Quantity</label>
          <input type="number" id="stockQuantity" name="stockQuantity" required min="0" />
          <span class="error"></span>
        </div>

        <!-- Discount Price -->
        <div class="form-group">
          <label for="discountprice">Discount Price</label>
          <input type="number" id="discountprice" name="discountprice" value="0" step="0.01" min="0" />
          <span class="error"></span>
        </div>

        <!-- Product Images -->
        <div class="form-group">
          <label for="image">Product Images</label>
          <input type="file" id="image" name="image" accept="image/*" multiple onchange="prepareCrop(event)" />
          <div id="imagePreview"></div>
          <p id="imageValidationMessage"></p>
          <span class="error"></span>
        </div>

        <!-- Cropping Modal -->
        <div id="cropModal" style="display: none">
          <div class="crop-container">
            <img id="cropImage" alt="Crop Image" />
          </div>
          <button type="button" id="cropButton">Crop & Save</button>
          <button type="button" id="cancelCropButton">Cancel</button>
        </div>

        <!-- Specification -->
        <div class="form-group">
          <label for="specification">Specification</label>
          <textarea id="specification" name="specification"></textarea>
          <span class="error"></span>
        </div>

        <!-- Submit Button -->
        <button type="submit">Add Product</button>
      </form>
    </div>
  </div>
</div>

<%- include("../../views/partials/admin/footer") %>

<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
<script>
  // Keeping all your existing JavaScript functionality
  let cropper;
  let selectedFiles = [];

  function prepareCrop(event) {
    const validationMessage = document.getElementById("imageValidationMessage");
    const files = event.target.files;
    if (files.length > 0) {
      const file = files[0];
      const reader = new FileReader();

      reader.onload = function (e) {
        const cropModal = document.getElementById("cropModal");
        const cropImage = document.getElementById("cropImage");

        cropImage.src = e.target.result;
        cropModal.style.display = "block";

        if (cropper) cropper.destroy();
        cropper = new Cropper(cropImage, {
          aspectRatio: 1,
          viewMode: 2,
        });
      };

      reader.readAsDataURL(file);
    }
  }

  document.getElementById("cropButton").addEventListener("click", () => {
    const cropModal = document.getElementById("cropModal");

    if (cropper) {
      const canvas = cropper.getCroppedCanvas({
        width: 300,
        height: 300,
      });

      canvas.toBlob((blob) => {
        const fileInput = document.getElementById("image");
        const croppedFile = new File([blob], `cropped-${Date.now()}.jpg`, {
          type: "image/jpeg",
        });
        selectedFiles.push(croppedFile);
        fileInput.files = createFileList(selectedFiles);

        const preview = document.getElementById("imagePreview");
        const img = document.createElement("img");
        img.src = URL.createObjectURL(croppedFile);

        const removeButton = document.createElement("button");
        removeButton.textContent = "Remove";
        removeButton.classList.add("remove-cropped-image");
        removeButton.onclick = () => removeCroppedImage(croppedFile, img);

        const imageContainer = document.createElement("div");
        imageContainer.classList.add("image-container");
        imageContainer.appendChild(img);
        imageContainer.appendChild(removeButton);
        preview.appendChild(imageContainer);
      });

      cropModal.style.display = "none";
      cropper.destroy();
    }
  });

  function removeCroppedImage(croppedFile, imgElement) {
    const index = selectedFiles.indexOf(croppedFile);
    if (index > -1) {
      selectedFiles.splice(index, 1);
    }
    imgElement.parentElement.remove();
    document.getElementById("image").files = createFileList(selectedFiles);
  }

  function createFileList(files) {
    const dataTransfer = new DataTransfer();
    files.forEach((file) => dataTransfer.items.add(file));
    return dataTransfer.files;
  }

  document.getElementById("cancelCropButton").addEventListener("click", () => {
    const cropModal = document.getElementById("cropModal");
    cropModal.style.display = "none";
    if (cropper) cropper.destroy();
  });

  document.getElementById("productForm").addEventListener("submit", function (event) {
    event.preventDefault();

    let errors = [];
    const productName = document.getElementById("productName").value.trim();
    if (!/^[A-Z][a-zA-Z0-9\s'-]*$/.test(productName)) {
      errors.push("Product name must start with a capital letter and can contain letters, numbers, spaces, apostrophes, and dashes.");
    }

    const description = document.getElementById("description").value.trim();
    if (description.length < 3) {
      errors.push("Description must be at least 3 characters.");
    }

    const category = document.getElementById("category").value;
    if (!category) {
      errors.push("Please select a category.");
    }

    const brand = document.getElementById("brand").value;
    if (!brand) {
      errors.push("Please select a brand.");
    }

    const price = parseFloat(document.getElementById("price").value);
    if (isNaN(price) || price <= 0) {
      errors.push("Price must be greater than 0.");
    }

    const stockQuantity = parseInt(document.getElementById("stockQuantity").value, 10);
    if (isNaN(stockQuantity) || stockQuantity <= 0) {
      errors.push("Stock quantity must be greater than 0.");
    }

    const discountPrice = parseFloat(document.getElementById("discountprice").value);
    if (isNaN(discountPrice) || discountPrice < 0 || discountPrice >= price) {
      errors.push("Discount price must be less than price and greater than 0.");
    }

    const images = document.getElementById("image").files;
    if (images.length < 3) {
      errors.push("Please choose at least 3 images.");
    }

    const specification = document.getElementById("specification").value.trim();
    if (specification.length < 3) {
      errors.push("Specification must be at least 3 characters.");
    }

    if (errors.length > 0) {
      alert(errors.join("\n"));
    } else {
      alert("Product added successfully!");
      this.submit();
    }
  });
</script>