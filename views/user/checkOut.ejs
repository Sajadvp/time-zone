<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Checkout</title>
    
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
      }
    
      body {
        background-color: #f1f3f6;
        min-height: 100vh;
        padding: 20px;
      }
    
      .checkout-container {
        max-width: 1200px;
        margin: 0 auto;
        display: grid;
        grid-template-columns: 1fr 350px;
        gap: 20px;
        padding: 20px 0;
      }
    
      @media (max-width: 768px) {
        .checkout-container {
          grid-template-columns: 1fr;
        }
      }
    
      .section-title {
        color: #2874f0;
        font-size: 16px;
        font-weight: 500;
        margin-bottom: 15px;
      }
    
      .card {
        background: white;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
      }
    
      .form-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 15px;
      }
    
      @media (max-width: 500px) {
        .form-grid {
          grid-template-columns: 1fr;
        }
      }
    
      .form-group {
        margin-bottom: 15px;
      }
    
      .form-label {
        display: block;
        margin-bottom: 5px;
        color: #666;
        font-size: 14px;
      }
    
      .form-input {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 14px;
        transition: border-color 0.2s;
      }
    
      .form-input:focus {
        outline: none;
        border-color: #2874f0;
        box-shadow: 0 0 0 2px rgba(40, 116, 240, 0.1);
      }
    
      .order-summary {
        position: sticky;
        top: 20px;
      }
    
      .summary-item {
        display: flex;
        justify-content: space-between;
        margin-bottom: 12px;
        color: #666;
        font-size: 14px;
      }
    
      .summary-total {
        display: flex;
        justify-content: space-between;
        margin-top: 15px;
        padding-top: 15px;
        border-top: 1px solid #eee;
        font-weight: 500;
        font-size: 16px;
        color: #212121;
      }
    
      .checkout-btn {
        width: 100%;
        padding: 12px;
        background: #fb641b;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 16px;
        font-weight: 500;
        cursor: pointer;
        margin-top: 20px;
        transition: background 0.2s;
      }
    
      .checkout-btn:hover {
        background: #e85d19;
      }
    
      .legal-text {
        text-align: center;
        color: #878787;
        font-size: 12px;
        margin-top: 15px;
      }
    
      .number-badge {
        background: #2874f0;
        color: white;
        width: 24px;
        height: 24px;
        border-radius: 50%;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        margin-right: 8px;
        font-size: 14px;
      }
    
      .section-header {
        display: flex;
        align-items: center;
        margin-bottom: 20px;
      }
    
      .payment-option {
        display: flex;
        align-items: center;
        padding: 15px;
        border: 1px solid #ddd;
        border-radius: 4px;
        margin-bottom: 10px;
        cursor: pointer;
        transition: all 0.2s;
      }
    
      .payment-option:hover {
        border-color: #2874f0;
        background-color: #f5f8ff;
      }
    
      .payment-option.selected {
        border-color: #2874f0;
        background-color: #f5f8ff;
      }
    
      .payment-option input[type="radio"] {
        margin-right: 12px;
      }
    
      .cod-icon {
        width: 24px;
        height: 24px;
        margin-right: 12px;
        background-color: #2874f0;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 12px;
      }
    
      .payment-text {
        flex-grow: 1;
      }
    
      .payment-title {
        font-weight: 500;
        color: #212121;
        margin-bottom: 2px;
      }
    
      .payment-description {
        font-size: 12px;
        color: #666;
      }
    
      .address-list {
        display: grid;
        gap: 15px;
        margin-bottom: 20px;
      }
    
      .address-card {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 15px;
        cursor: pointer;
        position: relative;
        transition: all 0.2s;
      }
    
      .address-card:hover {
        border-color: #2874f0;
        background-color: #f5f8ff;
      }
    
      .address-card.selected {
        border: 2px solid #2874f0;
        background-color: #f5f8ff;
      }
    
      .address-type {
        display: inline-block;
        padding: 4px 8px;
        background-color: #f0f0f0;
        border-radius: 4px;
        font-size: 12px;
        margin-bottom: 8px;
      }
    
      .address-details {
        font-size: 14px;
        color: #212121;
        line-height: 1.5;
      }
    
      .address-contact {
        margin-top: 8px;
        color: #666;
        font-size: 13px;
      }
    
      .add-new-address {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 12px;
        border: 1px dashed #2874f0;
        border-radius: 8px;
        color: #2874f0;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
        background: white;
      }
    
      .add-new-address:hover {
        background-color: #f5f8ff;
      }
    
      .radio-custom {
        position: absolute;
        right: 15px;
        top: 15px;
      }
    
      .address-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 5px;
        margin-bottom: 10px;
        background-color: #f9f9f9;
      }
    
      .address-details {
        flex: 1;
      }
    
      .address-radio {
        margin-left: 20px;
      }
    
      .address-item {
        position: relative;
        margin-bottom: 20px;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: #f9f9f9;
      }
    
      .address-actions {
        display: flex;
        justify-content: space-between;
        align-items: center;
      }
    
      .address-radio {
        position: absolute;
        top: 10px;
        right: 10px;
      }
    
      .address-buttons {
        display: flex;
        gap: 10px;
      }
    
      .edit-btn,
      .delete-btn {
        padding: 5px 10px;
        font-size: 14px;
        cursor: pointer;
        border: none;
        border-radius: 3px;
        background-color: #007bff;
        color: white;
      }
    
      .edit-btn:hover,
      .delete-btn:hover {
        background-color: #0056b3;
      }
    
      .delete-btn {
        background-color: #dc3545;
      }
    
      .delete-btn:hover {
        background-color: #c82333;
      }
    
      #addressModal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4);
      }
    
      .modal-content {
        background-color: #fefefe;
        margin: 15% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        max-width: 500px;
      }
    
      .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
      }
    
      .close:hover,
      .close:focus {
        color: black;
        text-decoration: none;
        cursor: pointer;
      }
    
      form {
        display: flex;
        flex-direction: column;
      }
    
      form label {
        margin-bottom: 5px;
      }
    
      form input {
        margin-bottom: 10px;
        padding: 8px;
        font-size: 14px;
        border-radius: 4px;
        border: 1px solid #ccc;
      }
    
      form button {
        padding: 10px;
        background-color: #388e3c;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
      }
    
      form button:hover {
        background-color: #2c6f2e;
      }
    
      .order-summary {
        position: fixed;
        top: 44px;
        right: 20px;
        width: 340px;
        height: 500px;
        background-color: white;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        padding: 20px;
        border-radius: 8px;
      }
    
      .card {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
      }
    
      .address-item[aria-checked="true"],
      .payment-option[aria-checked="true"] {
        border: 2px solid #007bff;
        background-color: #f8f9fa;
      }
    
      #addressModal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.4);
        z-index: 1000;
        padding-top: 50px;
      }
    
      .modal-content {
        background-color: #fff;
        margin: 5% auto;
        padding: 30px;
        width: 50%;
        border-radius: 10px;
        box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.1);
      }
    
      .close {
        font-size: 30px;
        font-weight: bold;
        color: #aaa;
        cursor: pointer;
        position: absolute;
        top: 10px;
        right: 20px;
      }
    
      .close:hover,
      .close:focus {
        color: black;
        text-decoration: none;
        cursor: pointer;
      }
    
      h2 {
        text-align: center;
        color: #333;
        font-size: 22px;
        margin-bottom: 20px;
      }
    
      .modal-body {
        display: flex;
        flex-direction: column;
        gap: 20px;
      }
    
      .form-group {
        display: flex;
        flex-direction: column;
        margin-bottom: 15px;
      }
    
      label {
        font-size: 14px;
        color: #555;
        margin-bottom: 5px;
      }
    
      input[type="text"],
      input[type="tel"],
      select {
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 5px;
        font-size: 14px;
        width: 100%;
        transition: border-color 0.3s;
      }
    
      input[type="text"]:focus,
      input[type="tel"]:focus,
      select:focus {
        border-color: #ff9900;
        outline: none;
      }
    
      small.error-message {
        color: red;
        font-size: 12px;
        margin-top: 5px;
      }
    
      .form-actions {
        display: flex;
        justify-content: space-between;
        align-items: center;
      }
    
      button {
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        font-size: 14px;
        cursor: pointer;
        transition: background-color 0.3s;
      }
    
      button.btn-secondary {
        background-color: #f1f1f1;
        color: #333;
      }
    
      button.btn-secondary:hover {
        background-color: #ddd;
      }
    
      button.btn-primary {
        background-color: #ff9900;
        color: white;
      }
    
      button.btn-primary:hover {
        background-color: #e68a00;
      }
    </style>
   
  </head>
  <body>
    
    <div class="checkout-container">
      <div class="main-content">
        <!-- Personal Information -->
        <div class="card">
          <div class="section-header">
            <span class="number-badge">1</span>
            <h2 class="section-title">Order Information</h2>
          </div>
        
          <% if (cartItems && cartItems.products.length > 0) { %>
            <% cartItems.products.forEach(item => { 
                const discountPrice = Number(item.productId.discountprice) || 0;
                const categoryDiscountPrice = Number(item.productId.categoryDiscountprice) || 0;
                const originalPrice = Number(item.productId.price) || 0;
        
                let bestPrice = originalPrice;
                if (discountPrice > 0 && (categoryDiscountPrice === 0 || discountPrice < categoryDiscountPrice)) {
                  bestPrice = discountPrice;
                } else if (categoryDiscountPrice > 0 && (discountPrice === 0 || categoryDiscountPrice < discountPrice)) {
                  bestPrice = categoryDiscountPrice;
                }
        
                const itemTotal = bestPrice * item.quantity;
                const savedAmount = (originalPrice - bestPrice) * item.quantity;
            %>
              <div class="summary-item" style="display: flex; align-items: center; margin-bottom: 15px; border-bottom: 1px solid #e0e0e0; padding-bottom: 10px;">
                <div class="cart-item-image" style="margin-right: 15px; flex-shrink: 0;">
                  <img src="<%= item.productId.image[0] %>" alt="<%= item.productId.name %>" style="width: 100px; height: auto; border-radius: 8px" />
                </div>
                <div style="flex-grow: 1;">
                  <div style="font-size: 16px; font-weight: bold; margin-bottom: 5px;">
                    <%= item.productId.productName %>
                  </div>
                  <div style="font-size: 14px; color: #888; text-decoration: line-through; margin-bottom: 3px;">
                    ₹<%= (originalPrice * item.quantity).toLocaleString('en-IN') %>
                  </div>
                  <div style="font-size: 16px; font-weight: bold; color: #333; margin-bottom: 5px;">
                    ₹<%= itemTotal.toLocaleString('en-IN') %>
                  </div>
                  <% if (savedAmount > 0) { %>
                    <div style="font-size: 14px; color: #28a745;">
                      You save ₹<%= savedAmount.toLocaleString('en-IN') %> on this product
                    </div>
                  <% } else { %>
                    <div style="font-size: 14px; color: #888;">No Discount Available</div>
                  <% } %>
                </div>
                <div style="font-size: 16px; font-weight: bold; color: #333; margin-left: auto; text-align: right;">
                  Quantity: <%= item.quantity %>
                </div>
              </div>
            <% }) %>
          <% } else { %>
            <p>Your cart is empty.</p>
          <% } %>
        
          <div class="summary-total">
            <span>Total</span>
            <span>₹<%= cartItems.products.reduce((acc, item) => acc + (Number(item.productId.discountprice) || Number(item.productId.categoryDiscountprice) || Number(item.productId.price)) * item.quantity, 0).toLocaleString('en-IN') %></span>
          </div>
        </div>

        <!-- Cart Items Section -->

        <div class="card">
          <div class="section-header">
            <span class="number-badge">2</span>
            <h2 class="section-title">Shipping Address</h2>
          </div>
        
          <div class="address-list" id="addressList">
            <!-- Check if the addresses array has any elements -->
            <% if (addresses.length > 0) { %>
              <!-- Loop through the addresses array and display each address with a radio button -->
              <% addresses.forEach((address, index) => { %>
                <div class="address-item">
                  <div class="address-details">
                    <p><strong>Address:</strong></p>
                    <p><%= address.street %></p>
                    <p><%= address.city %></p>
                    <p><%= address.state %></p>
                    <p><%= address.country %></p>
                    <p><%= address.zip %></p>
                    <p><%= address.phone %></p>
                  </div>
                  <div class="address-actions">
                    <!-- Radio button on top right corner -->
                    <div class="address-radio">
                      Delivered To: 
                      <input type="radio" name="selectedAddress" value="<%= address._id %>" <% if (index === 0) { %>checked<% } %> />
                    </div>
                    <!-- Edit and Delete buttons -->
                    <div class="address-buttons">
                      <a href="/edit-address/<%= address._id %>" class="edit-btn">Edit</a>
                      <button class="delete-btn" data-address-id="<%= address._id %>">Delete</button>
                    </div>
                  </div>
                </div>
              <% }); %>
            <% } else { %>
              <!-- Display this message if no addresses are found -->
              <p>No addresses found. Please add an address to continue.</p>
            <% } %>
          </div>
          
<!-- Button to Add New Address -->
<button class="add-new-address" onclick="openModal()">+ Add New Address</button>

<!-- Address Modal -->
<div id="addressModal" style="display: none;">
    <div class="modal-content">
        <span class="close" onclick="closeModal()">&times;</span>
        <h2>Add New Address</h2>
        
        <!-- Address Form -->
        <form id="addressForm" class="modal-body">
          <div class="form-group">
            <label for="street">Street Address*</label>
            <input type="text" id="street" name="street" />
            <small class="error-message"></small>
          </div>
        
          <div class="form-group">
            <label for="city">City*</label>
            <input type="text" id="city" name="city" />
            <small class="error-message"></small>
          </div>
        
          <div class="form-row">
            <div class="form-group">
              <label for="state">State*</label>
              <input type="text" id="state" name="state" />
              <small class="error-message"></small>
            </div>
            <div class="form-group">
              <label for="pincode">Pincode*</label>
              <input type="text" id="pincode" name="pincode" />
              <small class="error-message"></small>
            </div>
          </div>
        
          <div class="form-group">
            <label for="country">Country*</label>
            <input type="text" id="country" name="country" />
            <small class="error-message"></small>
          </div>
        
          <div class="form-group">
            <label for="phone">Phone Number*</label>
            <input type="tel" id="phone" name="phone" />
            <small class="error-message"></small>
          </div>
        
          <div class="form-group">
            <label for="addressType">Address Type*</label>
            <select id="addressType" name="addressType">
              <option value="">Select Type</option>
              <option value="Home">Home</option>
              <option value="Work">Work</option>
              <option value="Other">Other</option>
            </select>
            <small class="error-message"></small>
          </div>
        
          <div class="form-actions">
            <button type="button" class="btn btn-secondary" id="cancelBtn">Cancel</button>
            <button type="submit" class="btn btn-primary">Save Address</button>
          </div>
        </form>
    </div>
</div>

       <!-- Payment Method -->
<div class="card">
  <div class="section-header">
    <span class="number-badge">3</span>
    <h2 class="section-title">Payment Method</h2>
  </div>
  <div class="payment-option" id="cod-option">
    <input type="radio" name="payment" id="cod-radio" />
    <div class="cod-icon">₹</div>
    <div class="payment-text">
      <div class="payment-title">Cash on Delivery</div>
      <div class="payment-description">
        Pay when your order is delivered
      </div>
    </div>
  </div>
   <!-- Add error message div -->
   <div id="cod-error" style="color: red; margin-top: 10px; display: none;">
    Cash on Delivery is only available for purchases above ₹1000
  </div>
  <!-- Other payment options remain the same -->
  <div class="payment-option selected">
    <input type="radio" name="payment" checked />
    <div class="cod-icon">₹</div>
    <i class="fa fa-wallet"></i>
    <div class="payment-text">
      <div class="payment-title">Wallet</div>
      <div class="payment-description">
        Pay with wallet
      </div>
    </div>
  </div>
  <div class="payment-option selected">
    <input type="radio" name="payment" checked />
    <div class="cod-icon">₹</div>
    <i class="fa fa-credit-card"></i>
    <div class="payment-text">
      <div class="payment-title" id="rzp-button1">RazorePay</div>
      <div class="payment-description">
        Pay Now
      </div>
    </div>
  </div>
 
</div>
      </div>
  <!-- Apply Coupon Section -->
<div class="card">
  <div class="section-header">
    <span class="number-badge">4</span>
    <h2 class="section-title">Apply Coupon</h2>
  </div>

  <!-- Coupon Input and Apply Button -->
  <div class="coupon-apply">
    <input type="text" id="couponCode" placeholder="Enter coupon code" style="padding: 10px; width: 70%; border: 1px solid #ddd; border-radius: 4px;" />
    <button id="applyCouponBtn" style="padding: 10px 20px; background-color: #28a745; color: white; border: none; border-radius: 4px; cursor: pointer;">Apply</button>
  </div>
  
  <!-- Error Message -->
  <div id="couponError" style="color: red; margin-top: 10px; display: none;"></div>
  
  <!-- Display Applied Coupon -->
  <div id="appliedCoupon" style="margin-top: 15px; display: none;">
    <strong>Applied Coupon:</strong>
    <span id="appliedCouponCode"></span>
    <span id="appliedCouponDiscount" style="color: #28a745;"></span>
    <button id="removeCouponBtn" style="margin-left: 10px; padding: 5px 10px; background-color: #d9534f; color: white; border: none; border-radius: 4px; cursor: pointer;">Remove</button>
  </div>
  <!-- List of Available Coupons -->
  <div class="available-coupons" style="margin-top: 20px; padding: 20px; border-radius: 8px; background: #f8f9fa; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);">
    <h3 style="font-size: 20px; font-weight: bold; color: #333; border-bottom: 2px solid #ddd; padding-bottom: 10px; margin-bottom: 15px;">
        Available Coupons
    </h3>
    <ul id="availableCouponsList" style="list-style-type: none; padding: 0; margin: 0;">
        <% if (availableCoupons && availableCoupons.length > 0) { %>
            <% availableCoupons.forEach(coupon => { %>
                <li style="padding: 15px; margin-bottom: 10px; background: white; border-radius: 6px; display: flex; justify-content: space-between; align-items: center; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);">
                    <div>
                        <strong style="font-size: 16px; color: #222;"><%= coupon.couponCode %></strong>
                        <p style="margin: 5px 0; font-size: 14px; color: #666;">
                            Minimum Purchase: <strong>₹<%= coupon.minPurchaseAmount %></strong>
                        </p>
                    </div>
                    <span style="color: #28a745; font-weight: bold; font-size: 14px; background: #e6f4ea; padding: 5px 10px; border-radius: 4px;">
                        Save ₹<%= coupon.discountAmount %>!
                    </span>
                </li>
            <% }); %>
        <% } else { %>
            <li style="padding: 15px; text-align: center; font-size: 14px; color: #777;">No coupons available at the moment.</li>
        <% } %>
    </ul>
</div>

</div>
      <!-- Order Summary -->
      <div class="order-summary card">
        <h2 class="section-title">Order Summary</h2>
    
        <% if (cartItems && cartItems.products.length > 0) { 
            const totalItems = cartItems.products.reduce((total, item) => total + item.quantity, 0);
            const totalPrice = cartItems.products.reduce((acc, item) => acc + item.productId.price * item.quantity, 0); 
            const totalDiscountPrice = cartItems.products.reduce((acc, item) => {
                const discountPrice = Number(item.productId.discountprice) || 0;
                const categoryDiscountPrice = Number(item.productId.categoryDiscountprice) || 0;
                const originalPrice = Number(item.productId.price) || 0;
    
                let bestPrice = originalPrice;
                if (discountPrice > 0 && (categoryDiscountPrice === 0 || discountPrice < categoryDiscountPrice)) {
                  bestPrice = discountPrice;
                } else if (categoryDiscountPrice > 0 && (discountPrice === 0 || categoryDiscountPrice < discountPrice)) {
                  bestPrice = categoryDiscountPrice;
                }
                return acc + bestPrice * item.quantity;
            }, 0); 
            const totalSavings = totalPrice - totalDiscountPrice;
        %>
        <div class="summary-section" style="border: 1px solid #ddd; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
            <!-- Total Price -->
            <div class="summary-item" style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                <span style="font-size: 16px; font-weight: bold">Price (<%= totalItems %> items)</span>
                <span style="font-size: 16px">₹<%= totalPrice.toFixed(2) %></span>
            </div>
    
            <!-- Total Discount -->
            <div class="summary-item" style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                <span style="font-size: 16px; font-weight: bold">Discount</span>
                <span style="font-size: 16px; color: #d9534f">− ₹<%= totalSavings.toFixed(2) %></span>
            </div>
    
            <!-- Total Amount -->
            <div class="summary-total" style="display: flex; justify-content: space-between; font-size: 18px; font-weight: bold; border-top: 1px solid #ddd; padding-top: 10px; margin-top: 10px;">
              <span>Total Amount</span>
              <span id="totalAmount">₹<%= totalDiscountPrice.toFixed(2) %></span>
          </div>
    
            <!-- Savings -->
            <div style="font-size: 14px; color: #28a745; margin-top: 10px; text-align: right;">
                You will save ₹<%= totalSavings.toFixed(2) %> on this order
            </div>
        </div>
        <button class="checkout-btn" id="place-order-btn">Place Order</button>
        <% } else { %>
        <p>Your cart is empty.</p>
        <button class="checkout-btn" id="shop-now-btn" style="background-color: green;" onclick="window.location.href='/shopPage';">Shop Now</button>

        <% } %>
    
        <p class="legal-text">
            By placing your order, you agree to our Terms of Service and Privacy Policy.
        </p>
    </div>

    
    
    

  </body>
</html>

<style>
  .payment-option[disabled] {
  opacity: 0.5;
  cursor: not-allowed;
}

.payment-option[disabled] .payment-text {
  color: #666;
}
</style>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">

<!-- Include SweetAlert library -->
 <script>
  document.addEventListener('DOMContentLoaded', () => {
  // Function to check and update COD availability
  function updateCODAvailability() {
    const totalAmountText = document.getElementById('totalAmount').innerText.replace('₹', '');
    const totalAmount = parseFloat(totalAmountText);
    const codOption = document.getElementById('cod-option');
    const codRadio = document.getElementById('cod-radio');
    const codError = document.getElementById('cod-error');

    if (totalAmount < 1000) {
      // Disable COD
      codRadio.disabled = true;
      codOption.style.opacity = '0.5';
      codOption.style.cursor = 'not-allowed';
      codError.style.display = 'block';
      
      // If COD was selected, unselect it and select another option
      if (codRadio.checked) {
        codRadio.checked = false;
        codOption.classList.remove('selected');
        codOption.setAttribute('aria-checked', 'false');
        
        // Select the first available option (Wallet in this case)
        const walletOption = document.querySelector('.payment-option:nth-child(2)');
        const walletRadio = walletOption.querySelector('input[type="radio"]');
        walletRadio.checked = true;
        walletOption.classList.add('selected');
        walletOption.setAttribute('aria-checked', 'true');
      }
    } else {
      // Enable COD
      codRadio.disabled = false;
      codOption.style.opacity = '1';
      codOption.style.cursor = 'pointer';
      codError.style.display = 'none';
    }
  }

  // Initial check
  updateCODAvailability();

  // Add event listener for apply coupon button since it changes total amount
  document.getElementById('applyCouponBtn').addEventListener('click', () => {
    // Wait a bit for the total amount to update
    setTimeout(updateCODAvailability, 500);
  });

  // Add event listener for remove coupon button since it changes total amount
  document.getElementById('removeCouponBtn').addEventListener('click', () => {
    updateCODAvailability();
  });

  // Modify the existing payment option click handler to respect COD disabling
  const paymentOptions = document.querySelectorAll('.payment-option');
  paymentOptions.forEach(option => {
    const radio = option.querySelector('input[type="radio"]');
    
    option.addEventListener('click', () => {
      if (!radio.disabled) {  // Only allow selection if not disabled
        paymentOptions.forEach(otherOption => {
          const otherRadio = otherOption.querySelector('input[type="radio"]');
          otherOption.setAttribute('aria-checked', 'false');
          otherOption.classList.remove('selected');
          otherRadio.checked = false;
        });
        
        radio.checked = true;
        option.setAttribute('aria-checked', 'true');
        option.classList.add('selected');
      }
    });
  });
});
 </script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>


<script>
  document.addEventListener('DOMContentLoaded', () => {
  // Select all delete buttons
  const deleteButtons = document.querySelectorAll('.delete-btn');

  deleteButtons.forEach(button => {
    button.addEventListener('click', function (event) {
      const addressId = this.getAttribute('data-address-id'); // Get the address ID from the button

      // Show confirmation dialog
      Swal.fire({
        title: 'Are you sure?',
        text: 'You will not be able to recover this address!',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!',
      }).then((result) => {
        if (result.isConfirmed) {
          // Send a request to delete the address
          window.location.href = `/delete-address?addressId=${addressId}&path=checkOut`
          // Redirect to the delete route
        }
      });
    });
  });
});

</script>
<script>
  // Get modal and close button
var modal = document.getElementById("addressModal");
var closeButton = document.getElementsByClassName("close")[0];

// Function to open the modal
function openModal() {
    modal.style.display = "block";
}

// Function to close the modal
function closeModal() {
    modal.style.display = "none";
}

// Close the modal if the user clicks anywhere outside of the modal
window.onclick = function(event) {
    if (event.target == modal) {
        closeModal();
    }
};



</script>
<script>
  document.getElementById("addressForm").addEventListener("submit", async (e) => {
    e.preventDefault();

    clearErrors();

    const street = document.getElementById("street").value.trim();
    const city = document.getElementById("city").value.trim();
    const state = document.getElementById("state").value.trim();
    const pincode = document.getElementById("pincode").value.trim();
    const country = document.getElementById("country").value.trim();
    const phone = document.getElementById("phone").value.trim();
    const addressType = document.getElementById("addressType").value.trim();

    const textPattern = /^[A-Za-z\s]{3,}$/;
    const phonePattern = /^[6-9]\d{9}$/;
    const pincodePattern = /^\d{6}$/;

    let isValid = true;

    if (!textPattern.test(street)) {
      showError("street", "Street must contain only letters and be at least 3 characters long.");
      isValid = false;
    }
    if (!textPattern.test(city)) {
      showError("city", "City must contain only letters and be at least 3 characters long.");
      isValid = false;
    }
    if (!textPattern.test(state)) {
      showError("state", "State must contain only letters and be at least 3 characters long.");
      isValid = false;
    }
    if (!pincodePattern.test(pincode)) {
      showError("pincode", "Pincode must be exactly 6 digits.");
      isValid = false;
    }
    if (!textPattern.test(country)) {
      showError("country", "Country must contain only letters and be at least 3 characters long.");
      isValid = false;
    }
    if (!phonePattern.test(phone)) {
      showError("phone", "Phone number must be exactly 10 digits and start with 6 or greater.");
      isValid = false;
    }
    if (!addressType) {
      showError("addressType", "Please select an address type.");
      isValid = false;
    }

    if (!isValid) return;

    const formData = { street, city, state, pincode, country, phone, addressType };

    try {
      const response = await fetch("/newAddress", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(formData),
      });

      if (response.ok) {
        Swal.fire({
          icon: "success",
          title: "Address Saved!",
          text: "Your address has been saved successfully.",
          timer: 2000,
          showConfirmButton: false,
        });

        setTimeout(() => {
          window.location.reload();
        }, 2000);
      } else {
        throw new Error("Failed to add address");
      }
    } catch (error) {
      console.error("Error:", error);
    }
  });

  function showError(id, message) {
    const inputField = document.getElementById(id);
    const errorMessage = inputField.nextElementSibling;
    errorMessage.textContent = message;
    errorMessage.style.color = "red";
  }

  function clearErrors() {
    document.querySelectorAll(".error-message").forEach((el) => {
      el.textContent = "";
    });
  }
</script>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Address Selection Handling
    const addressItems = document.querySelectorAll('.address-item');
    addressItems.forEach(item => {
        const radio = item.querySelector('input[type="radio"]');
        
        // Improve ARIA for address selection
        item.setAttribute('role', 'radio');
        item.setAttribute('aria-checked', radio.checked);
        
        item.addEventListener('click', () => {
            // Uncheck all other addresses
            addressItems.forEach(otherItem => {
                const otherRadio = otherItem.querySelector('input[type="radio"]');
                otherItem.setAttribute('aria-checked', 'false');
                otherRadio.checked = false;
            });
            
            // Check the clicked address
            radio.checked = true;
            item.setAttribute('aria-checked', 'true');
        });
    });

    function paymentSuccessHandler (orderId, paymentId, signature) {
      fetch('/paymentSuccess', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    orderId: orderId, 
                    paymentId: paymentId,
                    signature : signature
                }),
            }).then((response) => response.json())
              .then((data) => { 
                if(data.success){
                   Swal.fire({
                                    icon: 'success',
                                    title: 'Order Placed!',
                                    text: 'Your order has been placed successfully.',
                                }).then(() => {
                                    window.location.href = '/orders'; 
                                });  
                }   
            })
    }

    // Payment Method Selection Handling
    const paymentOptions = document.querySelectorAll('.payment-option');
    paymentOptions.forEach(option => {
        const radio = option.querySelector('input[type="radio"]');
        
        // Improve ARIA for payment method selection
        option.setAttribute('role', 'radio');
        option.setAttribute('aria-checked', radio.checked);
        
        option.addEventListener('click', () => {
            // Uncheck all other payment options
            paymentOptions.forEach(otherOption => {
                const otherRadio = otherOption.querySelector('input[type="radio"]');
                otherOption.setAttribute('aria-checked', 'false');
                otherOption.classList.remove('selected');
                otherRadio.checked = false;
            });
            
            // Check the clicked payment option
            radio.checked = true;
            option.setAttribute('aria-checked', 'true');
            option.classList.add('selected');
        });
    });

    // Place Order Button Event Listener
    document.getElementById('place-order-btn').addEventListener('click', () => {
    // Get selected address
    const selectedAddressRadio = document.querySelector('input[name="selectedAddress"]:checked');
    const selectedPaymentRadio = document.querySelector('input[name="payment"]:checked');

    // Validate address selection
    if (!selectedAddressRadio) {
        Swal.fire({
            icon: 'error',
            title: 'Oops!',
            text: 'Please select a delivery address before placing the order.',
            accessKey: 'Confirm'
        });
        return;
    }

    // Validate payment method selection
    if (!selectedPaymentRadio) {
        Swal.fire({
            icon: 'error',
            title: 'Oops!',
            text: 'Please select a payment method before placing the order.',
            accessKey: 'Confirm'
        });
        return;
    }

    // Get selected address details
    const selectedAddressElement = selectedAddressRadio.closest('.address-item');
    const addressDetails = selectedAddressElement.querySelector('.address-details').innerText.trim();
    const paymentMethodText = selectedPaymentRadio.closest('.payment-option').querySelector('.payment-title').innerText.trim();

    // Confirmation dialog
    Swal.fire({
        title: 'Confirm Your Order',
        html: `
            <strong>Delivery Address:</strong><br>
            ${addressDetails}<br><br>
            <strong>Payment Method:</strong><br>
            ${paymentMethodText}
        `,
        icon: 'question',
        showCancelButton: true,
        confirmButtonText: 'Place Order',
        cancelButtonText: 'Cancel',
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
    }).then((result) => {
        if (result.isConfirmed) {
            // Order placement logic
            Swal.fire({
                title: 'Placing your order...',
                allowOutsideClick: false,
                didOpen: () => Swal.showLoading(),
            });

            fetch('/placeOrder', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    address: addressDetails, 
                    paymentMethod: paymentMethodText 
                }),
            })
            .then((response) => response.json())
            .then((data) => {
                if (data.success) {
                 
                  if (data.paymentMethod !== 'RazorePay') {
                           Swal.fire({
                                    icon: 'success',
                                    title: 'Order Placed!',
                                    text: 'Your order has been placed successfully.',
                                }).then(() => {
                                    window.location.href = '/orders'; // Redirect to orders page
                                });  
                  }

                    if (data.paymentMethod === 'RazorePay') {

                      console.log('getting the order Id for payment from backend : ', data.orderId)

                        var options = {
                            key: data.keyId, // Your Razorpay key_id
                            amount: data.amount, // Amount in paise
                            currency: data.currency,
                            order_id: data.orderId,
                            handler: function (response) {
                              console.log('Payment successful:', response);

                              console.log('ibde onn nokyoo kkkkkkkkkk222222');
                              
                             paymentSuccessHandler(response.razorpay_order_id, response.razorpay_payment_id, response.razorpay_signature);

                            },
                            prefill: {
                                name: 'Customer Name',
                                email: 'customer@example.com',
                                contact: '9876543210',
                            },
                            theme: {
                                color: "#528FF0"
                            }
                        };
                        var rzp1 = new Razorpay(options);
                        rzp1.open();
                    }
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Failed',
                        text: data.message || 'Failed to place the order. Please try again.',
                    });
                }
            })
            .catch((error) => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An unexpected error occurred. Please try again later.',
                });
            });
        }
    });
});
 });
</script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<script>
  let originalTotalAmount = parseFloat(document.getElementById('totalAmount').innerText.replace('₹', '')); // Store the original total amount

  document.getElementById('applyCouponBtn').addEventListener('click', async () => {
    const couponCode = document.getElementById('couponCode').value;
    const totalAmount = parseFloat(document.getElementById('totalAmount').innerText.replace('₹', '')); // Get total amount from the order summary
    const couponError = document.getElementById('couponError');
    const appliedCoupon = document.getElementById('appliedCoupon');
    const appliedCouponCode = document.getElementById('appliedCouponCode');
    const appliedCouponDiscount = document.getElementById('appliedCouponDiscount');

    // Clear previous error and applied coupon
    couponError.style.display = 'none';
    appliedCoupon.style.display = 'none';

    if (!couponCode) {
      couponError.innerText = 'Please enter a coupon code.';
      couponError.style.display = 'block';
      return;
    }

    try {
      // Send coupon code and total amount to the backend
      const response = await axios.post('/apply-coupon', {
        couponCode,
        totalAmount
      });

      // Update the UI with the discounted total amount
      const { discountedTotal, discountAmount } = response.data;

      document.getElementById('totalAmount').innerText = `₹${discountedTotal.toFixed(2)}`;
      appliedCouponCode.innerText = couponCode;
      appliedCouponDiscount.innerText = `(₹${discountAmount.toFixed(2)} off)`;
      appliedCoupon.style.display = 'block';
    } catch (error) {
      // Display error message from the backend
      couponError.innerText = error.response?.data?.message || 'Failed to apply coupon.';
      couponError.style.display = 'block';
    }
  });

  // Remove Coupon
  document.getElementById('removeCouponBtn').addEventListener('click', () => {
    document.getElementById('totalAmount').innerText = `₹${originalTotalAmount.toFixed(2)}`; // Revert to the original total amount
    document.getElementById('appliedCoupon').style.display = 'none';
    document.getElementById('couponCode').value = ''; // Clear coupon code input
  });
</script>