<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>User Profile</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Fixed FontAwesome CDN -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
      }

      body {
        background-color: #f8f9fa;
        color: #333;
      }

      /* Navbar Styles */
      .navbar {
        background: #2874f0;
        padding: 1rem 2rem;
        color: white;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      }

      .nav-content {
        max-width: 1300px;
        margin: 0 auto;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

      .nav-user {
        display: flex;
        align-items: center;
        gap: 1rem;
      }

      .nav-avatar {
        width: 40px;
        height: 40px;
        background: #efb033;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        color: white;
      }

      .nav-user-info {
        line-height: 1.4;
      }

      .nav-username {
        font-weight: 500;
      }

      .nav-email {
        font-size: 0.9rem;
        opacity: 0.8;
      }

      /* Main Content Styles */
      .container {
        max-width: 1300px;
        margin: 2rem auto;
        padding: 0 2rem;
        display: grid;
        grid-template-columns: 280px 1fr;
        gap: 2rem;
      }

      /* Sidebar Styles */
      .sidebar {
        background: white;
        padding: 1.5rem;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        height: fit-content;
      }

      .menu-list {
        list-style: none;
      }

      .menu-item {
        margin-bottom: 0.5rem;
      }

      .menu-link {
        display: block;
        padding: 0.8rem 1rem;
        color: #555;
        text-decoration: none;
        border-radius: 8px;
        transition: all 0.3s ease;
      }

      .menu-link.active {
        background: #2874f0;
        color: white;
      }

      .menu-link:hover:not(.active) {
        background: #f8f9fa;
        color: #efb033;
      }

      /* Profile Content Styles */
      .profile-content {
        background: white;
        padding: 2rem;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
      }

      .section-title {
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 1.5rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #f0f0f0;
      }

      .form-group {
        margin-bottom: 1.5rem;
      }

      .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: #555;
      }

      .form-control {
        width: 100%;
        padding: 0.8rem;
        border: 1px solid #ddd;
        border-radius: 8px;
        font-size: 1rem;
        transition: border-color 0.3s ease;
      }

      .form-control:focus {
        outline: none;
        border-color: #efb033;
      }

      .btn {
        padding: 0.8rem 1.5rem;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.3s ease;
        border: none;
      }

      .btn-save {
        background: #1c1c1c;
        color: white;
      }

      .btn-save:hover {
        background: #333;
      }

      .btn-add {
        background: #efb033;
        color: white;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
      }

      .btn-add:hover {
        background: #d99b2b;
      }

      /* Address Section Styles */
      .address-section {
        margin-top: 2rem;
        padding-top: 2rem;
        border-top: 2px solid #f0f0f0;
      }

      .address-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
      }

      .address-list {
        display: grid;
        gap: 1rem;
      }

      .address-card {
        padding: 1rem;
        border: 1px solid #ddd;
        border-radius: 8px;
        background: #f8f9fa;
      }

      .address-type {
        font-weight: 600;
        margin-bottom: 0.5rem;
      }

      .address-details {
        color: #666;
        line-height: 1.5;
      }

      .order-item {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
        background: #fff;
      }

      .order-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
      }

      .product-item {
        display: flex;
        gap: 15px;
        padding: 15px 0;
        border-bottom: 1px solid #eee;
      }

      .product-image img {
        width: 80px;
        height: 80px;
        object-fit: contain;
        border: 1px solid #ddd;
        border-radius: 4px;
      }

      .price-details {
        display: flex;
        gap: 10px;
        align-items: center;
      }

      .original-price {
        text-decoration: line-through;
        color: #999;
      }

      .discounted-price {
        color: #e91e63;
        font-weight: bold;
      }

      .quantity-status {
        display: flex;
        gap: 15px;
        margin-top: 10px;
      }

      .status {
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 0.8rem;
      }

      .status-pending { background: #fff3cd; color: #856404; }
      .status-processing { background: #cfe2ff; color: #052c65; }
      .status-shipped { background: #d1e7dd; color: #0a3622; }
      .status-delivered { background: #d4edda; color: #155724; }
      .status-cancelled { background: #f8d7da; color: #721c24; }
      .status-return { background: #fff3cd; color: #856404; }

      .order-summary {
        margin-top: 15px;
        padding-top: 15px;
        border-top: 1px solid #eee;
      }

      .order-actions {
        display: flex;
        gap: 10px;
        align-items: center;
        margin-top: 15px;
      }

      /* View Order Details Button */
      .view-details-btn {
        display: inline-block;
        padding: 10px 15px;
        font-size: 14px;
        font-weight: 500;
        color: #007bff;
        text-decoration: none;
        border: 1px solid #007bff;
        border-radius: 6px;
        transition: all 0.3s ease-in-out;
        background-color: transparent;
      }

      .view-details-btn:hover {
        background-color: #007bff;
        color: #fff;
      }

      /* Return Product Button */
      .return-btn {
        padding: 10px 15px;
        font-size: 14px;
        font-weight: 500;
        color: #fff;
        background-color: #dc3545;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.3s ease-in-out;
        display: inline-block;
      }

      .return-btn:hover {
        background-color: #c82333;
      }

      .nav-link {
        font-weight: bold; /* Make text bold */
        position: relative; /* Needed for hover underline */
      }

      .nav-link::after {
        content: '';
        position: absolute;
        left: 0;
        bottom: -2px; /* Position the underline */
        width: 0;
        height: 2px;
        background-color: black; /* Color of underline */
        transition: width 0.3s ease-in-out; /* Smooth effect */
      }

      .nav-link:hover::after {
        width: 100%; /* Full width on hover */
      }
      
      .return-status {
        padding: 10px 15px;
        font-size: 14px;
        font-weight: 500;
        color: #333;
        background-color: #f8f9fa;
        border: 1px solid #ddd;
        border-radius: 6px;
      }
      
      /* Invoice Download Button */
      .invoice-btn {
        display: inline-block;
        padding: 10px 15px;
        font-size: 14px;
        font-weight: 500;
        color: #28a745;
        text-decoration: none;
        border: 1px solid #28a745;
        border-radius: 6px;
        transition: all 0.3s ease-in-out;
        background-color: transparent;
      }

      .invoice-btn:hover {
        background-color: #28a745;
        color: #fff;
      }
      
      .no-orders-message {
        text-align: center;
        font-size: 1.2rem;
        color: #666;
        margin-top: 20px;
      }
      
      .savings-badge {
        background-color: #d4edda;
        color: #155724;
        padding: 3px 8px;
        border-radius: 4px;
        font-size: 0.85rem;
        margin-left: 10px;
      }
    </style>
  </head>
  <body>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg bg-light">
      <div class="container-fluid">
          <!-- Left Side (Brand) -->
          <a class="navbar-brand fw-bold" href="/">TIME ZONE.</a>
  
          <!-- Centered Navigation Links -->
          <div class="mx-auto">
              <ul class="navbar-nav d-flex flex-row gap-4">
                  <li class="nav-item">
                      <a class="nav-link" href="/">Home</a>
                  </li>
                  <li class="nav-item">
                      <a class="nav-link" href="/shopPage">Shop</a>
                  </li>
              </ul>
          </div>
  
          <!-- Right Side (User Icon) -->
          <div>
              <a href="#" class="nav-link">
                  <i class="fas fa-user fs-4"></i> <!-- FontAwesome user icon -->
              </a>
          </div>
      </div>
    </nav>
    
    <!-- Main Content -->
    <div class="container">
      <!-- Sidebar -->
      <aside class="sidebar">
        <ul class="menu-list">
          <li class="menu-item">
            <a href="/userProfile" class="menu-link">Profile Details</a>
          </li>
          <li class="menu-item">
            <a href="/cart" class="menu-link">My Cart</a>
          </li>
          <li class="menu-item">
            <a href="/orders" class="menu-link active">My Orders</a>
          </li>
          <li class="menu-item">
            <a href="/wishlist" class="menu-link">My Wishlist</a>
          </li>
          <li class="menu-item">
            <a href="/wallet" class="menu-link">My Wallet</a>
          </li>
          <li class="menu-item">
            <a href="/coupon" class="menu-link">Coupons</a>
          </li>
          <li class="menu-item">
            <a href="/helpcenter" class="menu-link">Help Center</a>
          </li>
        </ul>
      </aside>

      <!-- Profile Content -->
      <div class="profile-content">
        <h2 class="section-title">Your Orders</h2>
        <% if (orders.length === 0) { %>
            <div class="no-orders-animation">
                <lottie-player src="https://lottie.host/d2969b27-77c2-49e4-85bd-e7c57bd73758/NjB1X4SEYL.json" 
                             background="transparent" 
                             speed="1" 
                             style="width: 300px; height: 300px; margin: 0 auto;" 
                             loop 
                             autoplay>
                </lottie-player>
                <p class="no-orders-message">No orders found.</p>
            </div>
        <% } else { %>
            <% orders.forEach(order => { %>
                <div class="order-item">
                    <div class="order-header">
                        <span class="order-id">Order #<%= order._id.toString().slice(-6).toUpperCase() %></span>
                        <span class="order-date"><%= order.createdAt.toLocaleDateString() %></span>
                        <span class="status status-<%= order.status.toLowerCase() %>">
                            <%= order.status %>
                        </span>
                    </div>
    
                    <% order.items.forEach(item => { %>
                        <div class="product-item">
                            <div class="product-image">
                                <% if(item.productId && item.productId.image && item.productId.image.length > 0) { %>
                                    <img src="<%= item.productId.image[0] %>" alt="<%= item.productId.productName %>">
                                <% } %>
                            </div>
                            <div class="product-info">
                                <h3 class="product-name"><%= item.productId.productName %></h3>
                                <div class="price-details">
                                    <span class="original-price">₹<%= item.price %></span>
                                    <% if(item.discountedPrice < item.price) { %>
                                        <span class="discounted-price">₹<%= item.discountedPrice %></span>
                                        <span class="discount-percent">
                                            (<%= Math.round(((item.price - item.discountedPrice)/item.price)*100) %>% off)
                                        </span>
                                    <% } %>
                                </div>
                                <div class="quantity-status">
                                    <span class="quantity">Quantity: <%= item.quantity %></span>
                                    <span class="item-status status-<%= item.status.toLowerCase() %>">
                                        <%= item.status %>
                                    </span>
                                </div>
                            </div>
                        </div>
                    <% }) %>
    
                    <div class="order-summary">
                        <div class="total-amount">
                            Total Amount: ₹<%= order.totalAmount %>
                            <% const totalSavings = order.items.reduce((sum, item) => sum + ((item.price - item.discountedPrice) * item.quantity), 0); %>
                            <% if(totalSavings > 0) { %>
                                <span class="savings-badge">You saved ₹<%= totalSavings %></span>
                            <% } %>
                        </div>
                        
                        <div class="order-actions">
                          <a href="/orderDetails/<%= order._id %>" class="view-details-btn">
                              View Order Details
                          </a>
                          
                          <% if(order.status === 'Delivered') { %>
                              <!-- Invoice Download Button -->
                              <a href="/generateInvoice/<%= order._id %>" class="invoice-btn">
                                  <i class="fas fa-file-pdf me-1"></i> Download Invoice
                              </a>
                              
                              <% let hasReturnStatus = order.items.some(item => item.returnStatus); %>
<% order.items.forEach(item => { %>
    <% if (item.returnStatus) { %>
        <span class="return-status">Return Status: <%= item.returnStatus %></span>
    <% } %>
<% }) %>
<% if (!hasReturnStatus) { %>
    <button class="return-btn" data-order-id="<%= order._id %>">
        Return Product
    </button>
<% } %>
                          <% } %>
                        </div>
                    </div>
                </div>
            <% }) %>
        <% } %>
      </div>
    </div>
    
    <!-- Return Product Modal -->
    <div class="modal fade" id="returnProductModal" tabindex="-1" aria-labelledby="returnProductModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="returnProductModalLabel">Return Product</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="returnProductForm">
              <div class="mb-3">
                <label for="returnReason" class="form-label">Reason for Return</label>
                <input type="text" class="form-control" id="returnReason" name="returnReason" placeholder="Enter reason for return" required>
                <div class="invalid-feedback">Please enter a valid reason (minimum 5 characters, alphabetic only).</div>
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="button" class="btn btn-primary" id="submitReturn">Submit</button>
          </div>
        </div>
      </div>
    </div>
    
    <script src="https://unpkg.com/@lottiefiles/lottie-player@latest/dist/lottie-player.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
      document.addEventListener('DOMContentLoaded', function () {
    const returnButtons = document.querySelectorAll('.return-btn');
    const returnProductModal = new bootstrap.Modal(document.getElementById('returnProductModal'));
    const returnReasonInput = document.getElementById('returnReason');
    const submitReturnButton = document.getElementById('submitReturn');

    let currentOrderId, currentProductId;

    // Open modal when return button is clicked
    returnButtons.forEach(button => {
        button.addEventListener('click', function () {
            currentOrderId = this.getAttribute('data-order-id');
            currentProductId = this.getAttribute('data-product-id');
            returnProductModal.show();
        });
    });

    // Validate and submit return request
    submitReturnButton.addEventListener('click', async function () {
        const returnReason = returnReasonInput.value.trim();

        // Validation
        if (returnReason.length < 5 || !/^[A-Za-z\s]+$/.test(returnReason)) {
            returnReasonInput.classList.add('is-invalid');
            return;
        }

        returnReasonInput.classList.remove('is-invalid');

        try {
            const response = await fetch('/returnProduct', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    orderId: currentOrderId,
                    productId: currentProductId,
                    returnReason: returnReason,
                }),
            });

            const result = await response.json();

            if (result.success) {
                // Hide the return button and show the return status
                const returnButton = document.querySelector(`.return-btn[data-order-id="${currentOrderId}"][data-product-id="${currentProductId}"]`);
                if (returnButton) {
                    const returnStatus = document.createElement('span');
                    returnStatus.className = 'return-status';
                    returnStatus.textContent = `Return Status: ${result.returnStatus || 'Pending'}`;
                    returnButton.parentNode.replaceChild(returnStatus, returnButton);
                }

                // Success SweetAlert
                await Swal.fire({
                    position: 'top',  // Changed from top-center to top (top-center isn't a valid option, but top works similarly)
                    icon: 'success',
                    title: 'Success!',
                    text: 'Return request submitted successfully.',
                    showConfirmButton: false,
                    timer: 1500
                });
                
                returnProductModal.hide();
            } else {
                // Error SweetAlert
                await Swal.fire({
                    position: 'top',
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Failed to submit return request.',
                });
            }
        } catch (error) {
            console.error('Error:', error);
            // Error SweetAlert
            await Swal.fire({
                position: 'top',
                icon: 'error',
                title: 'Error',
                text: 'An error occurred while submitting the return request.',
            });
        }
    });

    // Clear validation on modal close
    returnProductModal._element.addEventListener('hidden.bs.modal', function () {
        returnReasonInput.classList.remove('is-invalid');
        returnReasonInput.value = '';
    });
});
    </script>
    
  </body>
</html>