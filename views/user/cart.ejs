<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>User Profile</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script> <!-- FontAwesome for user icon -->
  <style>
    /* General Styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
}

body {
  background-color: #f7f7f7;
  color: #333;
}

/* Navbar Styles */
.navbar {
  background: #2874f0;
  padding: 1rem 2rem;
  color: white;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.nav-content {
  max-width: 1300px;
  margin: 0 auto;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.nav-user {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.nav-avatar {
  width: 40px;
  height: 40px;
  background: #efb033;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
  color: white;
}

.nav-user-info {
  line-height: 1.4;
}

.nav-username {
  font-weight: 500;
}

.nav-email {
  font-size: 0.9rem;
  opacity: 0.8;
}

/* Main Content Styles */
.container {
  max-width: 1300px;
  margin: 2rem auto;
  padding: 0 2rem;
  display: grid;
  grid-template-columns: 280px 1fr;
  gap: 2rem;
}

/* Sidebar Styles */
.sidebar {
  background: white;
  padding: 1.5rem;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
  height: fit-content;
}

.menu-list {
  list-style: none;
}

.menu-item {
  margin-bottom: 0.5rem;
}

.menu-link {
  display: block;
  padding: 0.8rem 1rem;
  color: #555;
  text-decoration: none;
  border-radius: 8px;
  transition: all 0.3s ease;
}

.menu-link.active {
  background: #2874f0;
  color: white;
}

.menu-link:hover:not(.active) {
  background: #f8f9fa;
  color: #2874f0;
}

/* Cart Content Styles */
.profile-content {
  background: white;
  padding: 2rem;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
}

.section-title {
  font-size: 1.5rem;
  font-weight: 600;
  margin-bottom: 1.5rem;
  padding-bottom: 1rem;
  border-bottom: 2px solid #f0f0f0;
}

/* Cart Items Styles */
.cart-items {
  display: flex;
  flex-direction: column;
  gap: 20px;
  margin-top: 20px;
}

.cart-item {
  display: flex;
  align-items: center;
  border: 1px solid #ddd;
  border-radius: 8px;
  padding: 1rem;
  background: #f8f9fa;
}

.cart-item-image img {
  width: 100px;
  height: 100px;
  object-fit: cover;
  border-radius: 8px;
}

.cart-item-details {
  margin-left: 20px;
  flex: 1;
}

.cart-item-name {
  font-size: 1.2rem;
  font-weight: 600;
  margin-bottom: 0.5rem;
  color: #333;
}

.cart-item-price {
  font-size: 1rem;
  color: #666;
}

.cart-item-discount-price {
  color: #28a745;
  font-weight: bold;
}

.cart-item-quantity {
  display: flex;
  align-items: center;
  gap: 10px;
  margin-top: 0.5rem;
}

.cart-item-quantity button {
  background-color: #2874f0;
  color: white;
  border: none;
  padding: 8px 12px;
  border-radius: 4px;
  cursor: pointer;
  transition: background 0.3s ease;
}

.cart-item-quantity button:hover {
  background-color: #1e5bbf;
}

.cart-item-quantity span {
  font-size: 1rem;
  font-weight: 500;
  color: #333;
}

.cart-item-actions {
  text-align: right;
}

.cart-item-total {
  font-size: 1.2rem;
  font-weight: 600;
  color: #333;
}

.remove-btn {
  background-color: #ff6161;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  cursor: pointer;
  transition: background 0.3s ease;
}

.remove-btn:hover {
  background-color: #e53935;
}

/* Empty Cart Styles */
.empty-cart {
  text-align: center;
  padding: 50px 0;
}

.empty-cart p {
  font-size: 1.2rem;
  color: #666;
}

.shop-now-btn {
  background-color: #2874f0;
  color: white;
  border: none;
  padding: 12px 24px;
  border-radius: 8px;
  cursor: pointer;
  transition: background 0.3s ease;
}

.shop-now-btn:hover {
  background-color: #1e5bbf;
}

/* Grand Total Styles */
.cart-total {
  margin-top: 30px;
  text-align: right;
  background-color: #f8f9fa;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
}

.cart-total .label {
  font-size: 1.2rem;
  color: #666;
  font-weight: 500;
}

.cart-total .amount {
  font-size: 1.5rem;
  color: #28a745;
  font-weight: 600;
}

/* Clear Cart and Checkout Buttons */
.cart-actions {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-top: 30px;
}

.clear-cart-btn {
  background-color: #ff6161;
  color: white;
  border: none;
  padding: 12px 24px;
  border-radius: 8px;
  cursor: pointer;
  transition: background 0.3s ease;
}

.clear-cart-btn:hover {
  background-color: #e53935;
}

.checkout-btn {
  background-color: #2874f0;
  color: white;
  border: none;
  padding: 12px 24px;
  border-radius: 8px;
  cursor: pointer;
  transition: background 0.3s ease;
}

.checkout-btn:hover {
  background-color: #1e5bbf;
}
.nav-link {
        font-weight: bold;
        position: relative;
      }

      .nav-link::after {
        content: '';
        position: absolute;
        left: 0;
        bottom: -2px;
        width: 0;
        height: 2px;
        background-color: black;
        transition: width 0.3s ease-in-out;
      }

      .nav-link:hover::after {
        width: 100%;
      }

  </style>
  </head>
  <body>
    <nav class="navbar navbar-expand-lg bg-light">
      <div class="container-fluid">
          <!-- Left Side (Brand) -->
          <a class="navbar-brand fw-bold" href="/">TIME ZONE.</a>
  
          <!-- Centered Navigation Links -->
          <div class="mx-auto">
              <ul class="navbar-nav d-flex flex-row gap-4">
                  <li class="nav-item">
                      <a class="nav-link" href="/">Home</a>
                  </li>
                  <li class="nav-item">
                      <a class="nav-link" href="/shopPage">Shop</a>
                  </li>
              </ul>
          </div>
  
          <!-- Right Side (User Icon) -->
          <div>
              <a href="#" class="nav-link">
                  <i class="fas fa-user fs-4"></i> <!-- FontAwesome user icon -->
              </a>
          </div>
      </div>
  </nav>
<!-- Main Content -->
<div class="container">
  <!-- Sidebar -->
  <aside class="sidebar">
    <ul class="menu-list">
      <li class="menu-item">
        <a href="/userProfile" class="menu-link">Profile Details</a>
      </li>
      <li class="menu-item">
        <a href="/cart" class="menu-link active">My Cart</a>
      </li>
      <li class="menu-item">
        <a href="/orders" class="menu-link">My Orders</a>
      </li>
      <li class="menu-item">
        <a href="/wishlist" class="menu-link">My Wishlist</a>
      </li>
      <li class="menu-item">
        <a href="/wallet" class="menu-link">My Wallet</a>
      </li>
      <li class="menu-item">
        <a href="/coupon" class="menu-link">Coupons</a>
      </li>
      <li class="menu-item">
        <a href="/helpcenter" class="menu-link">Help Center</a>
      </li>
    </ul>
  </aside>

  <!-- Cart Content -->
  <div class="profile-content">
    <div class="cart-header">
      <h2 class="section-title">Your Cart</h2>
    </div>
    <div class="cart-items">
      <% let grandTotal = 0; %>
      <% let isCartEmpty = true; %>
      <% if (cartItems && cartItems.products.length > 0) { %>
        <% isCartEmpty = false; %>
        <% cartItems.products.forEach(item => { %>
          <% 
          // Ensure values are numbers
          const discountPrice = Number(item.productId.discountprice) || 0;
          const categoryDiscountPrice = Number(item.productId.categoryDiscountprice) || 0;
          const originalPrice = Number(item.productId.price) || 0;
  
          // Determine the best price
          let bestPrice = originalPrice;
          if (discountPrice > 0 && (categoryDiscountPrice === 0 || discountPrice < categoryDiscountPrice)) {
            bestPrice = discountPrice;
          } else if (categoryDiscountPrice > 0 && (discountPrice === 0 || categoryDiscountPrice < discountPrice)) {
            bestPrice = categoryDiscountPrice;
          }
  
          // Calculate item total
          const itemTotal = bestPrice * item.quantity;
          grandTotal += itemTotal;
          %>
          <div class="cart-item">
            <div class="cart-item-image">
              <img src="<%= item.productId.image[0] %>" alt="<%= item.productId.name %>" />
            </div>
            <div class="cart-item-details">
              <h3 class="cart-item-name"><%= item.productId.productName %></h3>
              <p class="cart-item-price">
                Price: ₹<%= bestPrice.toLocaleString('en-IN') %> per item
                <% if (bestPrice < originalPrice) { %>
                  <span class="cart-item-discount-price">
                    (You save ₹<%= (originalPrice - bestPrice).toLocaleString('en-IN') %> per item)
                  </span>
                <% } else { %>
                  <span>(No Discount available)</span>
                <% } %>
              </p>
              <div class="cart-item-quantity">
                <button onclick="updateQuantity('<%= item.productId._id %>', -1)">-</button>
                <span><%= item.quantity %></span>
                <button onclick="updateQuantity('<%= item.productId._id %>', 1)">+</button>
              </div>
            </div>
            <div class="cart-item-actions">
              <p class="cart-item-total">Total: ₹<span class="price"><%= itemTotal.toLocaleString('en-IN') %></span></p>
              <button class="remove-btn" onclick="removeItem('<%= item.productId._id %>')">Remove</button>
            </div>
          </div>
        <% }) %>
        <!-- Grand Total Section -->
        <div class="cart-total">
          <span class="label">Grand Total:</span>
          <strong class="amount">₹<%= grandTotal.toLocaleString('en-IN') %></strong>
        </div>
      <% } else { %>
        <div class="empty-cart">
          <p>Your cart is empty.</p>
          <button class="shop-now-btn" onclick="window.location.href='/shopPage'">Shop Now</button>
        </div>
      <% } %>
    </div>
  
    <!-- Clear Cart and Checkout Buttons -->
    <% if (!isCartEmpty) { %>
      <div class="cart-actions">
        <button id="clear-cart-btn" class="clear-cart-btn">Clear Cart</button>
        <button class="checkout-btn" onclick="window.location.href='/checkout'">Checkout</button>
      </div>
    <% } %>
  </div>
          
<!-- Add SweetAlert2 CDN -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<!-- Optional: Add Animate.css for extra animations -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />

<style>
  /* Custom CSS for SweetAlert2 to match Flipkart-like style */
  .swal2-toast {
    background: #ffffff !important;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15) !important;
    border-radius: 8px !important;
    padding: 10px 15px !important;
    font-family: 'Arial', sans-serif !important;
    border-left: 4px solid !important; /* Dynamic border color based on type */
  }

  .swal2-toast.success {
    border-left-color: #28a745 !important; /* Green for success */
  }

  .swal2-toast.error {
    border-left-color: #dc3545 !important; /* Red for error */
  }

  .swal2-toast.warning {
    border-left-color: #ffc107 !important; /* Yellow for warning */
  }

  .swal2-toast.info {
    border-left-color: #17a2b8 !important; /* Blue for info */
  }

  .swal2-title {
    font-size: 16px !important;
    color: #212121 !important;
    font-weight: 600 !important;
  }

  .swal2-html-container {
    font-size: 14px !important;
    color: #666 !important;
  }

  /* Smaller popup for non-toast alerts */
  .small-swal {
    width: 300px !important;
    padding: 15px !important;
  }
</style>

<script>
// Base configuration for toast alerts
const toastConfig = {
  toast: true,
  position: 'top-end',
  showConfirmButton: false,
  timer: 2000,
  timerProgressBar: true,
  customClass: {
    popup: 'swal2-toast animate__animated animate__fadeInRight', // Animation for entry
  },
  didClose: () => {
    Swal.getPopup().classList.remove('animate__fadeInRight');
    Swal.getPopup().classList.add('animate__fadeOutRight'); // Animation for exit
  },
};

// Update Quantity Function
async function updateQuantity(productId, newQuantity) {
  try {
    const response = await fetch(`/updateCartQuantity/${productId}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ quantity: newQuantity }),
    });

    const data = await response.json();
    if (data.success) {
      Swal.fire({
        ...toastConfig,
        icon: 'success',
        title: 'Quantity Updated',
        text: data.message,
        customClass: { ...toastConfig.customClass, popup: `${toastConfig.customClass.popup} success` },
      }).then(() => location.reload());
    } else {
      Swal.fire({
        ...toastConfig,
        icon: 'error',
        title: 'Update Failed',
        text: data.message,
        customClass: { ...toastConfig.customClass, popup: `${toastConfig.customClass.popup} error` },
      });
    }
  } catch (error) {
    console.error(error);
    Swal.fire({
      ...toastConfig,
      icon: 'error',
      title: 'Error',
      text: 'Error occurred while updating the cart.',
      customClass: { ...toastConfig.customClass, popup: `${toastConfig.customClass.popup} error` },
    });
  }
}

// Handle Item Removal
async function removeItem(productId) {
  const result = await Swal.fire({
    title: 'Are you sure?',
    text: 'Do you want to remove this item from your cart?',
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#d33',
    cancelButtonColor: '#3085d6',
    confirmButtonText: 'Yes, remove it!',
    cancelButtonText: 'Cancel',
    customClass: {
      popup: 'animate__animated animate__zoomIn', // Zoom-in animation for confirmation
    },
  });

  if (result.isConfirmed) {
    try {
      const response = await fetch('/removeFromCart', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ productId }),
      });

      const data = await response.json();
      if (data.success) {
        Swal.fire({
          ...toastConfig,
          icon: 'success',
          title: 'Item Removed',
          text: 'The item has been removed from your cart.',
          customClass: { ...toastConfig.customClass, popup: `${toastConfig.customClass.popup} success` },
        }).then(() => location.reload());
      } else {
        Swal.fire({
          ...toastConfig,
          icon: 'error',
          title: 'Removal Failed',
          text: data.message || 'Issue while removing the item.',
          customClass: { ...toastConfig.customClass, popup: `${toastConfig.customClass.popup} error` },
        });
      }
    } catch (error) {
      console.error(error);
      Swal.fire({
        ...toastConfig,
        icon: 'error',
        title: 'Error',
        text: 'An error occurred while removing the item.',
        customClass: { ...toastConfig.customClass, popup: `${toastConfig.customClass.popup} error` },
      });
    }
  } else {
    Swal.fire({
      ...toastConfig,
      icon: 'info',
      title: 'Canceled',
      text: 'The item was not removed.',
      customClass: { ...toastConfig.customClass, popup: `${toastConfig.customClass.popup} info` },
    });
  }
}

// Clear Cart Function
document.addEventListener('DOMContentLoaded', () => {
  const clearCartBtn = document.getElementById('clear-cart-btn');
  if (clearCartBtn) {
    clearCartBtn.addEventListener('click', async () => {
      Swal.fire({
        title: 'Are you sure?',
        text: 'You will not be able to recover this cart!',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, clear it!',
        customClass: {
          popup: 'animate__animated animate__zoomIn', // Zoom-in animation
        },
      }).then(async (result) => {
        if (result.isConfirmed) {
          try {
            const response = await fetch('/clearCart', {
              method: 'DELETE',
              headers: { 'Content-Type': 'application/json' },
            });

            const data = await response.json();
            if (data.success) {
              Swal.fire({
                ...toastConfig,
                icon: 'success',
                title: 'Cart Cleared',
                text: 'Your cart has been cleared.',
                customClass: { ...toastConfig.customClass, popup: `${toastConfig.customClass.popup} success` },
              }).then(() => window.location.reload());
            } else {
              Swal.fire({
                ...toastConfig,
                icon: 'error',
                title: 'Failed',
                text: data.message || 'Failed to clear the cart.',
                customClass: { ...toastConfig.customClass, popup: `${toastConfig.customClass.popup} error` },
              });
            }
          } catch (error) {
            console.error('Error:', error);
            Swal.fire({
              ...toastConfig,
              icon: 'error',
              title: 'Error',
              text: 'An error occurred while clearing the cart.',
              customClass: { ...toastConfig.customClass, popup: `${toastConfig.customClass.popup} error` },
            });
          }
        }
      });
    });
  } else {
    console.error('Clear Cart button not found!');
  }
});
</script>